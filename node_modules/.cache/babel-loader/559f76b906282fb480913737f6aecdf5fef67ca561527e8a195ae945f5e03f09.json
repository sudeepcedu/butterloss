{"ast":null,"code":"var _jsxFileName = \"/Users/sudeepch/butterloss/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport UserSetup from './components/UserSetup';\nimport DailyLogForm from './components/DailyLogForm';\nimport DeficitProgress from './components/DeficitProgress';\nimport ButterCollection from './components/ButterCollection';\nimport EstimatedCompletion from './components/EstimatedCompletion';\nimport Calendar from './components/Calendar';\nimport WeightLoss from './components/WeightLoss';\nimport TipsForSuccess from './components/TipsForSuccess';\nimport Rewards from './components/Rewards';\nimport IterationSetup from './components/IterationSetup';\nimport IterationHistory from './components/IterationHistory';\nimport IterationDetails from './components/IterationDetails';\nimport WeightInputModal from './components/WeightInputModal';\nimport { calculateTotalDeficitNeeded, calculateCurrentDeficit, calculateRemainingDeficit, calculateButterPacks, calculateGheePacks, calculateCurrentStreak } from './utils/calculations';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [logs, setLogs] = useState([]);\n  const [currentView, setCurrentView] = useState('setup');\n  const [showIterationSetup, setShowIterationSetup] = useState(false);\n  const [showWeightInput, setShowWeightInput] = useState(false);\n  const [goalCompletedHandled, setGoalCompletedHandled] = useState(false);\n  const [iterations, setIterations] = useState([]);\n  const [currentIterationStartDate, setCurrentIterationStartDate] = useState('');\n  const [selectedIteration, setSelectedIteration] = useState(null);\n\n  // Custom setUser function to prevent accidental null resets\n  const setUserSafely = useCallback(newUser => {\n    if (newUser === null && user !== null) {\n      console.log('Preventing user reset to null - user already exists');\n      return;\n    }\n    console.log('Setting user safely:', newUser);\n    setUser(newUser);\n  }, [user]);\n  useEffect(() => {\n    console.log('Current view changed:', currentView);\n  }, [currentView]);\n  useEffect(() => {\n    console.log('Weight input modal state:', showWeightInput);\n  }, [showWeightInput]);\n  useEffect(() => {\n    const savedUser = localStorage.getItem('butterloss_user');\n    const savedLogs = localStorage.getItem('butterloss_logs');\n    const savedIterations = localStorage.getItem('butterloss_iterations');\n    const savedIterationStartDate = localStorage.getItem('butterloss_iteration_start_date');\n    console.log('Loading from localStorage:', {\n      savedUser: savedUser ? JSON.parse(savedUser) : null,\n      savedLogs: savedLogs ? JSON.parse(savedLogs) : null,\n      savedIterations,\n      savedIterationStartDate\n    });\n    try {\n      if (savedUser) {\n        const parsedUser = JSON.parse(savedUser);\n        console.log('Setting user from localStorage:', parsedUser);\n        setUserSafely(parsedUser);\n        // Don't automatically set view - let user choose \n      } else {\n        console.log('No saved user found, staying on setup');\n        setCurrentView('setup');\n      }\n      if (savedLogs) {\n        const parsedLogs = JSON.parse(savedLogs);\n        console.log('Setting logs from localStorage:', parsedLogs);\n        if (Array.isArray(parsedLogs)) {\n          setLogs(parsedLogs);\n          console.log('Logs loaded successfully:', parsedLogs.length, 'entries');\n        } else {\n          console.error('Invalid logs format:', parsedLogs);\n        }\n      } else {\n        console.log('No saved logs found');\n      }\n      if (savedIterations) {\n        setIterations(JSON.parse(savedIterations));\n      }\n      if (savedIterationStartDate) {\n        setCurrentIterationStartDate(savedIterationStartDate);\n      } else {\n        // Set current date as iteration start date if not set\n        const today = new Date().toISOString().split('T')[0];\n        setCurrentIterationStartDate(today);\n        localStorage.setItem('butterloss_iteration_start_date', today);\n      }\n    } catch (error) {\n      console.error('Error loading from localStorage:', error);\n    }\n  }, [setUserSafely]);\n  useEffect(() => {\n    console.log('Saving to localStorage:', {\n      user,\n      logs,\n      iterations,\n      currentIterationStartDate\n    });\n    try {\n      // Only save user if it's not null and actually exists\n      if (user && user.name) {\n        localStorage.setItem('butterloss_user', JSON.stringify(user));\n        console.log('User saved successfully');\n      } else {\n        console.log('Not saving user - user is null or invalid');\n      }\n\n      // Only save logs if they exist and user exists\n      if (user && logs.length >= 0) {\n        localStorage.setItem('butterloss_logs', JSON.stringify(logs));\n        console.log('Logs saved successfully:', logs.length, 'entries');\n      } else {\n        console.log('Not saving logs - user is null or logs invalid');\n      }\n      localStorage.setItem('butterloss_iterations', JSON.stringify(iterations));\n      localStorage.setItem('butterloss_iteration_start_date', currentIterationStartDate);\n    } catch (error) {\n      console.error('Error saving to localStorage:', error);\n    }\n  }, [user, logs, iterations, currentIterationStartDate]);\n  useEffect(() => {\n    console.log('User state changed:', user);\n  }, [user]);\n  useEffect(() => {\n    console.log('Logs state changed:', logs);\n  }, [logs]);\n\n  // Auto-trigger weight input modal when goal is completed\n  useEffect(() => {\n    if (user && logs.length > 0) {\n      const totalDeficitNeeded = calculateTotalDeficitNeeded(user.targetLoss);\n      const currentDeficit = calculateCurrentDeficit(logs);\n\n      // Check if goal is completed and weight input modal is not already shown\n      if (currentDeficit >= totalDeficitNeeded && !showWeightInput && !showIterationSetup && !goalCompletedHandled) {\n        console.log('🎉 Goal completed! Auto-triggering weight input modal');\n        setShowWeightInput(true);\n      }\n    }\n  }, [logs, user, showWeightInput, showIterationSetup, goalCompletedHandled]);\n  const handleUserSetup = newUser => {\n    console.log('Setting up new user:', newUser);\n\n    // Guard against calling this when user already exists\n    if (user) {\n      console.log('User already exists, ignoring setup call');\n      return;\n    }\n    setUserSafely(newUser);\n\n    // Only create initial weight log if no logs exist\n    if (logs.length === 0) {\n      const today = new Date().toISOString().split('T')[0];\n      const initialWeightLog = {\n        date: today,\n        deficit: null,\n        weight: newUser.weight\n      };\n      console.log('Creating initial weight log:', initialWeightLog);\n      setLogs([initialWeightLog]);\n    } else {\n      console.log('User already has logs, not overwriting:', logs);\n    }\n    setCurrentView('dashboard');\n  };\n  const handleLogSubmit = log => {\n    console.log('Submitting log:', log);\n\n    // Special case: if deficit is null, remove the entry\n    if (log.deficit === null) {\n      setLogs(prev => prev.filter(l => l.date !== log.date));\n      return;\n    }\n    const existingLogIndex = logs.findIndex(l => l.date === log.date);\n    if (existingLogIndex >= 0) {\n      const updatedLogs = [...logs];\n      const existingLog = updatedLogs[existingLogIndex];\n\n      // Preserve existing weight if the new log doesn't have weight data\n      const mergedLog = {\n        date: log.date,\n        deficit: log.deficit,\n        weight: log.weight !== null ? log.weight : existingLog.weight\n      };\n      updatedLogs[existingLogIndex] = mergedLog;\n      console.log('Updating existing log with preserved weight, new logs:', updatedLogs);\n      setLogs(updatedLogs);\n    } else {\n      const newLogs = [...logs, log];\n      console.log('Adding new log, new logs:', newLogs);\n      setLogs(newLogs);\n    }\n  };\n  const handleUpdateDailyGoal = newGoal => {\n    if (user) {\n      const updatedUser = {\n        ...user,\n        dailyDeficitGoal: newGoal\n      };\n      setUserSafely(updatedUser);\n    }\n  };\n  const handleUpdateRewards = rewards => {\n    localStorage.setItem('butterloss_rewards', JSON.stringify(rewards));\n  };\n  const handleStartNewIteration = () => {\n    if (!user) return;\n    console.log('🔄 Starting new iteration setup');\n\n    // If goal was completed, create iteration summary from current data\n    if (goalCompletedHandled) {\n      const currentDeficit = calculateCurrentDeficit(logs);\n      const butterPacks = calculateButterPacks(logs);\n      const endDate = new Date().toISOString().split('T')[0];\n      const duration = Math.ceil((new Date(endDate).getTime() - new Date(currentIterationStartDate).getTime()) / (1000 * 60 * 60 * 24));\n\n      // Calculate weight lost based on the starting weight of this iteration\n      const finalWeight = getCurrentWeight();\n      const weightLost = user.weight - finalWeight;\n\n      // Calculate which rewards were earned during this iteration\n      const totalDeficitNeeded = calculateTotalDeficitNeeded(user.targetLoss);\n      const earnedRewards = [];\n\n      // Get current rewards from localStorage\n      const currentRewards = JSON.parse(localStorage.getItem('butterloss_rewards') || '[]');\n      const defaultRewards = ['Buy a new outfit', 'Go for a spa day', 'Take a weekend trip', 'Buy something expensive'];\n      const rewards = currentRewards.length > 0 ? currentRewards : defaultRewards;\n\n      // Check which milestones were achieved based on current deficit\n      const sliceSize = totalDeficitNeeded / 4;\n      for (let i = 0; i < 4; i++) {\n        const sliceEnd = (i + 1) * sliceSize;\n        if (currentDeficit >= sliceEnd) {\n          earnedRewards.push(rewards[i] || defaultRewards[i]);\n        }\n      }\n      const iterationSummary = {\n        id: `iteration_${Date.now()}`,\n        startDate: currentIterationStartDate,\n        endDate: endDate,\n        startingWeight: user.weight,\n        targetWeight: user.targetWeight,\n        finalWeight: finalWeight,\n        weightLost: weightLost,\n        totalDeficitBurned: currentDeficit,\n        butterPacksEarned: butterPacks,\n        duration: duration,\n        isCompleted: true\n      };\n      const iterationData = {\n        summary: iterationSummary,\n        logs: [...logs],\n        rewards: earnedRewards,\n        milestoneAchievements: [false, false, false, false]\n      };\n      setIterations(prev => [iterationData, ...prev]);\n    }\n    setShowIterationSetup(true);\n  };\n  const handleWeightInputComplete = currentWeight => {\n    if (!user) return;\n    console.log('⚖️ Weight input completed with weight:', currentWeight);\n\n    // Add weight log entry for today's date\n    const today = new Date().toISOString().split('T')[0];\n    const weightLogEntry = {\n      date: today,\n      deficit: null,\n      weight: currentWeight\n    };\n\n    // Add to logs if it doesn't already exist for today\n    const existingLogIndex = logs.findIndex(log => log.date === today);\n    if (existingLogIndex >= 0) {\n      // Update existing log with weight\n      const updatedLogs = [...logs];\n      updatedLogs[existingLogIndex] = {\n        ...updatedLogs[existingLogIndex],\n        weight: currentWeight\n      };\n      setLogs(updatedLogs);\n    } else {\n      // Add new weight log entry\n      setLogs(prev => [...prev, weightLogEntry]);\n    }\n    const currentDeficit = calculateCurrentDeficit(logs);\n\n    // Calculate which rewards were earned during this iteration\n    const totalDeficitNeeded = calculateTotalDeficitNeeded(user.targetLoss);\n    const earnedRewards = [];\n\n    // Get current rewards from localStorage\n    const currentRewards = JSON.parse(localStorage.getItem('butterloss_rewards') || '[]');\n    const defaultRewards = ['Buy a new outfit', 'Go for a spa day', 'Take a weekend trip', 'Buy something expensive'];\n    const rewards = currentRewards.length > 0 ? currentRewards : defaultRewards;\n\n    // Check which milestones were achieved based on current deficit\n    const sliceSize = totalDeficitNeeded / 4;\n    for (let i = 0; i < 4; i++) {\n      const sliceEnd = (i + 1) * sliceSize;\n      if (currentDeficit >= sliceEnd) {\n        earnedRewards.push(rewards[i] || defaultRewards[i]);\n      }\n    }\n\n    // Don't add to iterations yet - only when user starts new iteration\n    setShowWeightInput(false);\n    setGoalCompletedHandled(true);\n    // Don't automatically start new iteration - let user decide when to start\n  };\n  const handleWeightInputSkip = () => {\n    if (!user) return;\n\n    // Get the last logged weight\n    const weightLogs = logs.filter(log => log.weight !== null).sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n    const lastLoggedWeight = weightLogs.length > 0 ? weightLogs[0].weight : user.weight;\n    console.log('⏭️ Weight input skipped, using last logged weight:', lastLoggedWeight);\n\n    // Add weight log entry for today's date using last logged weight\n    const today = new Date().toISOString().split('T')[0];\n    const weightLogEntry = {\n      date: today,\n      deficit: null,\n      weight: lastLoggedWeight\n    };\n\n    // Add to logs if it doesn't already exist for today\n    const existingLogIndex = logs.findIndex(log => log.date === today);\n    if (existingLogIndex >= 0) {\n      // Update existing log with weight\n      const updatedLogs = [...logs];\n      updatedLogs[existingLogIndex] = {\n        ...updatedLogs[existingLogIndex],\n        weight: lastLoggedWeight\n      };\n      setLogs(updatedLogs);\n    } else {\n      // Add new weight log entry\n      setLogs(prev => [...prev, weightLogEntry]);\n    }\n    const currentDeficit = calculateCurrentDeficit(logs);\n\n    // Calculate which rewards were earned during this iteration\n    const totalDeficitNeeded = calculateTotalDeficitNeeded(user.targetLoss);\n    const earnedRewards = [];\n\n    // Get current rewards from localStorage\n    const currentRewards = JSON.parse(localStorage.getItem('butterloss_rewards') || '[]');\n    const defaultRewards = ['Buy a new outfit', 'Go for a spa day', 'Take a weekend trip', 'Buy something expensive'];\n    const rewards = currentRewards.length > 0 ? currentRewards : defaultRewards;\n\n    // Check which milestones were achieved based on current deficit\n    const sliceSize = totalDeficitNeeded / 4;\n    for (let i = 0; i < 4; i++) {\n      const sliceEnd = (i + 1) * sliceSize;\n      if (currentDeficit >= sliceEnd) {\n        earnedRewards.push(rewards[i] || defaultRewards[i]);\n      }\n    }\n\n    // Don't add to iterations yet - only when user starts new iteration\n    setShowWeightInput(false);\n    setGoalCompletedHandled(true);\n    // Don't automatically start new iteration - let user decide when to start\n  };\n  const handleNewIteration = (currentWeight, targetWeight) => {\n    if (!user) return;\n\n    // Calculate new target loss\n    const newTargetLoss = currentWeight - targetWeight;\n\n    // Update user with new weights and target loss\n    const updatedUser = {\n      ...user,\n      weight: currentWeight,\n      targetWeight: targetWeight,\n      targetLoss: newTargetLoss\n    };\n    setUserSafely(updatedUser);\n\n    // Add weight log entry for today's date\n    const today = new Date().toISOString().split('T')[0];\n    const weightLogEntry = {\n      date: today,\n      deficit: null,\n      weight: currentWeight\n    };\n\n    // Reset all tracking data and add initial weight log\n    setLogs([weightLogEntry]);\n    setCurrentIterationStartDate(new Date().toISOString().split('T')[0]);\n    setGoalCompletedHandled(false);\n\n    // Clear localStorage for current iteration\n    localStorage.removeItem('butterloss_logs');\n    localStorage.removeItem('butterloss_rewards');\n    for (let i = 0; i < 4; i++) {\n      localStorage.removeItem(`milestone_${i}_achieved`);\n    }\n    setShowIterationSetup(false);\n  };\n  const handleViewIterationDetails = iterationId => {\n    const iteration = iterations.find(iter => iter.summary.id === iterationId);\n    if (iteration) {\n      setSelectedIteration(iteration);\n    }\n  };\n  const getCurrentWeight = () => {\n    const weightLogs = logs.filter(log => log.weight !== null).sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n    return weightLogs.length > 0 ? weightLogs[0].weight : user.weight;\n  };\n  const resetData = () => {\n    if (window.confirm('Are you sure you want to reset all your data? This cannot be undone.')) {\n      localStorage.removeItem('butterloss_user');\n      localStorage.removeItem('butterloss_logs');\n      localStorage.removeItem('butterloss_rewards');\n      localStorage.removeItem('butterloss_iterations');\n      localStorage.removeItem('butterloss_iteration_start_date');\n      for (let i = 0; i < 4; i++) {\n        localStorage.removeItem(`milestone_${i}_achieved`);\n      }\n      setUserSafely(null);\n      setLogs([]);\n      setIterations([]);\n      setCurrentIterationStartDate('');\n      setCurrentView('setup');\n    }\n  };\n  const resetIteration = () => {\n    if (window.confirm('Are you sure you want to reset the current iteration? This will remove all calorie deficit entries and weight log entries from the current iteration. This cannot be undone.')) {\n      // Clear all logs for current iteration\n      setLogs([]);\n      // Reset iteration start date to today\n      const today = new Date().toISOString().split('T')[0];\n      setCurrentIterationStartDate(today);\n      // Reset goal completion flag\n      setGoalCompletedHandled(false);\n      // Clear localStorage for current iteration\n      localStorage.removeItem('butterloss_logs');\n      localStorage.removeItem('butterloss_rewards');\n      for (let i = 0; i < 4; i++) {\n        localStorage.removeItem(`milestone_${i}_achieved`);\n      }\n      console.log('🔄 Current iteration reset successfully');\n    }\n  };\n  const clearCacheAndRestart = () => {\n    if (window.confirm('This will clear all localStorage and restart the app. Continue?')) {\n      localStorage.clear();\n      window.location.reload();\n    }\n  };\n  if (!user) {\n    console.log('No user found, showing UserSetup');\n    return /*#__PURE__*/_jsxDEV(UserSetup, {\n      onComplete: handleUserSetup\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 513,\n      columnNumber: 12\n    }, this);\n  }\n  console.log('User exists, showing dashboard. User:', user, 'Logs:', logs.length);\n\n  // Get current weight from the most recent weight entry, or use initial weight\n  const weightLogs = logs.filter(log => log.weight !== null).sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n  const currentWeight = weightLogs.length > 0 ? weightLogs[0].weight : user.weight;\n  const totalDeficitNeeded = calculateTotalDeficitNeeded(user.targetLoss);\n  const currentDeficit = calculateCurrentDeficit(logs);\n  const remainingDeficit = calculateRemainingDeficit(totalDeficitNeeded, currentDeficit);\n  const butterPacks = calculateButterPacks(logs);\n  const gheePacks = calculateGheePacks(logs);\n  const currentStreak = calculateCurrentStreak(logs);\n  const weightLossData = {\n    user,\n    logs,\n    totalDeficitNeeded,\n    currentDeficit,\n    remainingDeficit,\n    butterPacks,\n    gheePacks,\n    currentStreak\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"app-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\uD83E\\uDDC8 ButterLoss\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 545,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"nav\", {\n        className: \"nav-tabs\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: `nav-tab ${currentView === 'dashboard' ? 'active' : ''}`,\n          onClick: () => setCurrentView('dashboard'),\n          children: \"\\uD83D\\uDCCA Dashboard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 547,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `nav-tab ${currentView === 'calendar' ? 'active' : ''}`,\n          onClick: () => setCurrentView('calendar'),\n          children: \"\\uD83D\\uDCC5 Calendar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 553,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `nav-tab ${currentView === 'butter' ? 'active' : ''}`,\n          onClick: () => setCurrentView('butter'),\n          children: \"\\uD83E\\uDDC8 Butter Collection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 559,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `nav-tab ${currentView === 'weight' ? 'active' : ''}`,\n          onClick: () => setCurrentView('weight'),\n          children: \"\\u2696\\uFE0F Weight Loss\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 565,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `nav-tab ${currentView === 'rewards' ? 'active' : ''}`,\n          onClick: () => setCurrentView('rewards'),\n          children: \"\\uD83C\\uDFC6 Rewards\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 571,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 546,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"reset-btn\",\n        onClick: resetData,\n        children: \"\\uD83D\\uDD04 Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 578,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"clear-cache-btn\",\n        onClick: clearCacheAndRestart,\n        children: \"\\uD83E\\uDDF9 Clear Cache & Restart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 581,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 544,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"app-main\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"user-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Welcome back, \", user.name, \"! \\uD83D\\uDC4B\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 588,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Current Weight: \", currentWeight, \" kg | Target: \", user.targetWeight, \" kg\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 589,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 587,\n        columnNumber: 9\n      }, this), currentView === 'dashboard' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dashboard\",\n        children: [/*#__PURE__*/_jsxDEV(DailyLogForm, {\n          onLogSubmit: handleLogSubmit,\n          currentWeight: currentWeight\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 594,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(DeficitProgress, {\n          data: weightLossData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 595,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(EstimatedCompletion, {\n          data: weightLossData,\n          onUpdateDailyGoal: handleUpdateDailyGoal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 596,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(TipsForSuccess, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 597,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(IterationHistory, {\n          iterations: iterations,\n          onViewDetails: handleViewIterationDetails\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 598,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dashboard-actions\",\n          children: [currentDeficit >= totalDeficitNeeded && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleStartNewIteration,\n            className: \"complete-iteration-btn\",\n            children: \"\\uD83D\\uDD01 Start New Iteration\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 604,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: resetIteration,\n            className: \"reset-iteration-btn\",\n            children: \"\\uD83D\\uDD04 Reset Iteration\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 608,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 602,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 593,\n        columnNumber: 11\n      }, this), currentView === 'calendar' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"calendar-view\",\n        children: /*#__PURE__*/_jsxDEV(Calendar, {\n          logs: logs,\n          onLogSubmit: handleLogSubmit,\n          currentWeight: currentWeight\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 617,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 616,\n        columnNumber: 11\n      }, this), currentView === 'butter' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"butter-view\",\n        children: /*#__PURE__*/_jsxDEV(ButterCollection, {\n          data: weightLossData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 623,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 622,\n        columnNumber: 11\n      }, this), currentView === 'weight' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"weight-view\",\n        children: /*#__PURE__*/_jsxDEV(WeightLoss, {\n          logs: logs,\n          targetWeight: user.targetWeight,\n          onLogSubmit: handleLogSubmit,\n          currentWeight: currentWeight\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 629,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 628,\n        columnNumber: 11\n      }, this), currentView === 'rewards' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rewards-view\",\n        children: /*#__PURE__*/_jsxDEV(Rewards, {\n          data: weightLossData,\n          onUpdateRewards: handleUpdateRewards\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 635,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 634,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 586,\n      columnNumber: 7\n    }, this), showIterationSetup && /*#__PURE__*/_jsxDEV(IterationSetup, {\n      onComplete: handleNewIteration,\n      onCancel: () => setShowIterationSetup(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 641,\n      columnNumber: 9\n    }, this), selectedIteration && /*#__PURE__*/_jsxDEV(IterationDetails, {\n      iteration: selectedIteration,\n      onClose: () => setSelectedIteration(null)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 648,\n      columnNumber: 9\n    }, this), showWeightInput && /*#__PURE__*/_jsxDEV(WeightInputModal, {\n      startingWeight: user.weight,\n      lastLoggedWeight: getCurrentWeight(),\n      onComplete: handleWeightInputComplete,\n      onSkip: handleWeightInputSkip\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 655,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 543,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"vQs38HwzgFiRIL6Z2fd8RylXnfQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","UserSetup","DailyLogForm","DeficitProgress","ButterCollection","EstimatedCompletion","Calendar","WeightLoss","TipsForSuccess","Rewards","IterationSetup","IterationHistory","IterationDetails","WeightInputModal","calculateTotalDeficitNeeded","calculateCurrentDeficit","calculateRemainingDeficit","calculateButterPacks","calculateGheePacks","calculateCurrentStreak","jsxDEV","_jsxDEV","App","_s","user","setUser","logs","setLogs","currentView","setCurrentView","showIterationSetup","setShowIterationSetup","showWeightInput","setShowWeightInput","goalCompletedHandled","setGoalCompletedHandled","iterations","setIterations","currentIterationStartDate","setCurrentIterationStartDate","selectedIteration","setSelectedIteration","setUserSafely","newUser","console","log","savedUser","localStorage","getItem","savedLogs","savedIterations","savedIterationStartDate","JSON","parse","parsedUser","parsedLogs","Array","isArray","length","error","today","Date","toISOString","split","setItem","name","stringify","totalDeficitNeeded","targetLoss","currentDeficit","handleUserSetup","initialWeightLog","date","deficit","weight","handleLogSubmit","prev","filter","l","existingLogIndex","findIndex","updatedLogs","existingLog","mergedLog","newLogs","handleUpdateDailyGoal","newGoal","updatedUser","dailyDeficitGoal","handleUpdateRewards","rewards","handleStartNewIteration","butterPacks","endDate","duration","Math","ceil","getTime","finalWeight","getCurrentWeight","weightLost","earnedRewards","currentRewards","defaultRewards","sliceSize","i","sliceEnd","push","iterationSummary","id","now","startDate","startingWeight","targetWeight","totalDeficitBurned","butterPacksEarned","isCompleted","iterationData","summary","milestoneAchievements","handleWeightInputComplete","currentWeight","weightLogEntry","handleWeightInputSkip","weightLogs","sort","a","b","lastLoggedWeight","handleNewIteration","newTargetLoss","removeItem","handleViewIterationDetails","iterationId","iteration","find","iter","resetData","window","confirm","resetIteration","clearCacheAndRestart","clear","location","reload","onComplete","fileName","_jsxFileName","lineNumber","columnNumber","remainingDeficit","gheePacks","currentStreak","weightLossData","className","children","onClick","onLogSubmit","data","onUpdateDailyGoal","onViewDetails","onUpdateRewards","onCancel","onClose","onSkip","_c","$RefreshReg$"],"sources":["/Users/sudeepch/butterloss/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport UserSetup from './components/UserSetup';\nimport DailyLogForm from './components/DailyLogForm';\nimport DeficitProgress from './components/DeficitProgress';\nimport ButterCollection from './components/ButterCollection';\nimport EstimatedCompletion from './components/EstimatedCompletion';\nimport Calendar from './components/Calendar';\nimport WeightLoss from './components/WeightLoss';\nimport TipsForSuccess from './components/TipsForSuccess';\nimport Rewards from './components/Rewards';\nimport IterationSetup from './components/IterationSetup';\nimport IterationHistory from './components/IterationHistory';\nimport IterationDetails from './components/IterationDetails';\nimport WeightInputModal from './components/WeightInputModal';\nimport { \n  calculateTotalDeficitNeeded, \n  calculateCurrentDeficit, \n  calculateRemainingDeficit, \n  calculateButterPacks,\n  calculateGheePacks, \n  calculateCurrentStreak \n} from './utils/calculations';\nimport { User, DailyLog, WeightLossData, IterationData, IterationSummary } from './types';\nimport './App.css';\n\nconst App: React.FC = () => {\n  const [user, setUser] = useState<User | null>(null);\n  const [logs, setLogs] = useState<DailyLog[]>([]);\n  const [currentView, setCurrentView] = useState<'setup' | 'dashboard' | 'calendar' | 'butter' | 'weight' | 'rewards'>('setup');\n  const [showIterationSetup, setShowIterationSetup] = useState(false);\n  const [showWeightInput, setShowWeightInput] = useState(false);\n  const [goalCompletedHandled, setGoalCompletedHandled] = useState(false);\n  const [iterations, setIterations] = useState<IterationData[]>([]);\n  const [currentIterationStartDate, setCurrentIterationStartDate] = useState<string>('');\n  const [selectedIteration, setSelectedIteration] = useState<IterationData | null>(null);\n\n  // Custom setUser function to prevent accidental null resets\n  const setUserSafely = useCallback((newUser: User | null) => {\n    if (newUser === null && user !== null) {\n      console.log('Preventing user reset to null - user already exists');\n      return;\n    }\n    console.log('Setting user safely:', newUser);\n    setUser(newUser);\n  }, [user]);\n\n  useEffect(() => {\n    console.log('Current view changed:', currentView);\n  }, [currentView]);\n\n  useEffect(() => {\n    console.log('Weight input modal state:', showWeightInput);\n  }, [showWeightInput]);\n\n  useEffect(() => {\n    const savedUser = localStorage.getItem('butterloss_user');\n    const savedLogs = localStorage.getItem('butterloss_logs');\n    const savedIterations = localStorage.getItem('butterloss_iterations');\n    const savedIterationStartDate = localStorage.getItem('butterloss_iteration_start_date');\n    \n    console.log('Loading from localStorage:', { \n      savedUser: savedUser ? JSON.parse(savedUser) : null, \n      savedLogs: savedLogs ? JSON.parse(savedLogs) : null, \n      savedIterations, \n      savedIterationStartDate \n    });\n    \n    try {\n      if (savedUser) {\n        const parsedUser = JSON.parse(savedUser);\n        console.log('Setting user from localStorage:', parsedUser);\n        setUserSafely(parsedUser);\n        // Don't automatically set view - let user choose \n      } else {\n        console.log('No saved user found, staying on setup');\n        setCurrentView('setup');\n      }\n      \n      if (savedLogs) {\n        const parsedLogs = JSON.parse(savedLogs);\n        console.log('Setting logs from localStorage:', parsedLogs);\n        if (Array.isArray(parsedLogs)) {\n          setLogs(parsedLogs);\n          console.log('Logs loaded successfully:', parsedLogs.length, 'entries');\n        } else {\n          console.error('Invalid logs format:', parsedLogs);\n        }\n      } else {\n        console.log('No saved logs found');\n      }\n      \n      if (savedIterations) {\n        setIterations(JSON.parse(savedIterations));\n      }\n      \n      if (savedIterationStartDate) {\n        setCurrentIterationStartDate(savedIterationStartDate);\n      } else {\n        // Set current date as iteration start date if not set\n        const today = new Date().toISOString().split('T')[0];\n        setCurrentIterationStartDate(today);\n        localStorage.setItem('butterloss_iteration_start_date', today);\n      }\n    } catch (error) {\n      console.error('Error loading from localStorage:', error);\n    }\n  }, [setUserSafely]);\n\n  useEffect(() => {\n    console.log('Saving to localStorage:', { user, logs, iterations, currentIterationStartDate });\n    try {\n      // Only save user if it's not null and actually exists\n      if (user && user.name) {\n        localStorage.setItem('butterloss_user', JSON.stringify(user));\n        console.log('User saved successfully');\n      } else {\n        console.log('Not saving user - user is null or invalid');\n      }\n      \n      // Only save logs if they exist and user exists\n      if (user && logs.length >= 0) {\n        localStorage.setItem('butterloss_logs', JSON.stringify(logs));\n        console.log('Logs saved successfully:', logs.length, 'entries');\n      } else {\n        console.log('Not saving logs - user is null or logs invalid');\n      }\n      \n      localStorage.setItem('butterloss_iterations', JSON.stringify(iterations));\n      localStorage.setItem('butterloss_iteration_start_date', currentIterationStartDate);\n    } catch (error) {\n      console.error('Error saving to localStorage:', error);\n    }\n  }, [user, logs, iterations, currentIterationStartDate]);\n\n  useEffect(() => {\n    console.log('User state changed:', user);\n  }, [user]);\n\n  useEffect(() => {\n    console.log('Logs state changed:', logs);\n  }, [logs]);\n\n  // Auto-trigger weight input modal when goal is completed\n  useEffect(() => {\n    if (user && logs.length > 0) {\n      const totalDeficitNeeded = calculateTotalDeficitNeeded(user.targetLoss);\n      const currentDeficit = calculateCurrentDeficit(logs);\n      \n      // Check if goal is completed and weight input modal is not already shown\n      if (currentDeficit >= totalDeficitNeeded && !showWeightInput && !showIterationSetup && !goalCompletedHandled) {\n        console.log('🎉 Goal completed! Auto-triggering weight input modal');\n        setShowWeightInput(true);\n      }\n    }\n  }, [logs, user, showWeightInput, showIterationSetup, goalCompletedHandled]);\n\n  const handleUserSetup = (newUser: User) => {\n    console.log('Setting up new user:', newUser);\n    \n    // Guard against calling this when user already exists\n    if (user) {\n      console.log('User already exists, ignoring setup call');\n      return;\n    }\n    \n    setUserSafely(newUser);\n    \n    // Only create initial weight log if no logs exist\n    if (logs.length === 0) {\n      const today = new Date().toISOString().split('T')[0];\n      const initialWeightLog: DailyLog = {\n        date: today,\n        deficit: null,\n        weight: newUser.weight\n      };\n      console.log('Creating initial weight log:', initialWeightLog);\n      setLogs([initialWeightLog]);\n    } else {\n      console.log('User already has logs, not overwriting:', logs);\n    }\n    \n    setCurrentView('dashboard');\n  };\n\n  const handleLogSubmit = (log: DailyLog) => {\n    console.log('Submitting log:', log);\n    \n    // Special case: if deficit is null, remove the entry\n    if (log.deficit === null) {\n      setLogs(prev => prev.filter(l => l.date !== log.date));\n      return;\n    }\n    \n    const existingLogIndex = logs.findIndex(l => l.date === log.date);\n    if (existingLogIndex >= 0) {\n      const updatedLogs = [...logs];\n      const existingLog = updatedLogs[existingLogIndex];\n      \n      // Preserve existing weight if the new log doesn't have weight data\n      const mergedLog: DailyLog = {\n        date: log.date,\n        deficit: log.deficit,\n        weight: log.weight !== null ? log.weight : existingLog.weight\n      };\n      \n      updatedLogs[existingLogIndex] = mergedLog;\n      console.log('Updating existing log with preserved weight, new logs:', updatedLogs);\n      setLogs(updatedLogs);\n    } else {\n      const newLogs = [...logs, log];\n      console.log('Adding new log, new logs:', newLogs);\n      setLogs(newLogs);\n    }\n  };\n\n  const handleUpdateDailyGoal = (newGoal: number) => {\n    if (user) {\n      const updatedUser = { ...user, dailyDeficitGoal: newGoal };\n      setUserSafely(updatedUser);\n    }\n  };\n\n  const handleUpdateRewards = (rewards: string[]) => {\n    localStorage.setItem('butterloss_rewards', JSON.stringify(rewards));\n  };\n\n  const handleStartNewIteration = () => {\n    if (!user) return;\n    console.log('🔄 Starting new iteration setup');\n    \n    // If goal was completed, create iteration summary from current data\n    if (goalCompletedHandled) {\n      const currentDeficit = calculateCurrentDeficit(logs);\n      const butterPacks = calculateButterPacks(logs);\n      const endDate = new Date().toISOString().split('T')[0];\n      const duration = Math.ceil((new Date(endDate).getTime() - new Date(currentIterationStartDate).getTime()) / (1000 * 60 * 60 * 24));\n\n      // Calculate weight lost based on the starting weight of this iteration\n      const finalWeight = getCurrentWeight();\n      const weightLost = user.weight - finalWeight;\n\n      // Calculate which rewards were earned during this iteration\n      const totalDeficitNeeded = calculateTotalDeficitNeeded(user.targetLoss);\n      const earnedRewards: string[] = [];\n      \n      // Get current rewards from localStorage\n      const currentRewards = JSON.parse(localStorage.getItem('butterloss_rewards') || '[]');\n      const defaultRewards = [\n        'Buy a new outfit',\n        'Go for a spa day', \n        'Take a weekend trip',\n        'Buy something expensive'\n      ];\n      const rewards = currentRewards.length > 0 ? currentRewards : defaultRewards;\n\n      // Check which milestones were achieved based on current deficit\n      const sliceSize = totalDeficitNeeded / 4;\n      for (let i = 0; i < 4; i++) {\n        const sliceEnd = (i + 1) * sliceSize;\n        if (currentDeficit >= sliceEnd) {\n          earnedRewards.push(rewards[i] || defaultRewards[i]);\n        }\n      }\n\n      const iterationSummary: IterationSummary = {\n        id: `iteration_${Date.now()}`,\n        startDate: currentIterationStartDate,\n        endDate: endDate,\n        startingWeight: user.weight,\n        targetWeight: user.targetWeight,\n        finalWeight: finalWeight,\n        weightLost: weightLost,\n        totalDeficitBurned: currentDeficit,\n        butterPacksEarned: butterPacks,\n        duration: duration,\n        isCompleted: true\n      };\n\n      const iterationData: IterationData = {\n        summary: iterationSummary,\n        logs: [...logs],\n        rewards: earnedRewards,\n        milestoneAchievements: [false, false, false, false]\n      };\n\n      setIterations(prev => [iterationData, ...prev]);\n    }\n    \n    setShowIterationSetup(true);\n  };\n\n  const handleWeightInputComplete = (currentWeight: number) => {\n    if (!user) return;\n    console.log('⚖️ Weight input completed with weight:', currentWeight);\n\n    // Add weight log entry for today's date\n    const today = new Date().toISOString().split('T')[0];\n    const weightLogEntry: DailyLog = {\n      date: today,\n      deficit: null,\n      weight: currentWeight\n    };\n    \n    // Add to logs if it doesn't already exist for today\n    const existingLogIndex = logs.findIndex(log => log.date === today);\n    if (existingLogIndex >= 0) {\n      // Update existing log with weight\n      const updatedLogs = [...logs];\n      updatedLogs[existingLogIndex] = {\n        ...updatedLogs[existingLogIndex],\n        weight: currentWeight\n      };\n      setLogs(updatedLogs);\n    } else {\n      // Add new weight log entry\n      setLogs(prev => [...prev, weightLogEntry]);\n    }\n\n    const currentDeficit = calculateCurrentDeficit(logs);\n\n    // Calculate which rewards were earned during this iteration\n    const totalDeficitNeeded = calculateTotalDeficitNeeded(user.targetLoss);\n    const earnedRewards: string[] = [];\n    \n    // Get current rewards from localStorage\n    const currentRewards = JSON.parse(localStorage.getItem('butterloss_rewards') || '[]');\n    const defaultRewards = [\n      'Buy a new outfit',\n      'Go for a spa day', \n      'Take a weekend trip',\n      'Buy something expensive'\n    ];\n    const rewards = currentRewards.length > 0 ? currentRewards : defaultRewards;\n\n    // Check which milestones were achieved based on current deficit\n    const sliceSize = totalDeficitNeeded / 4;\n    for (let i = 0; i < 4; i++) {\n      const sliceEnd = (i + 1) * sliceSize;\n      if (currentDeficit >= sliceEnd) {\n        earnedRewards.push(rewards[i] || defaultRewards[i]);\n      }\n    }\n\n    // Don't add to iterations yet - only when user starts new iteration\n    setShowWeightInput(false);\n    setGoalCompletedHandled(true);\n    // Don't automatically start new iteration - let user decide when to start\n  };\n\n  const handleWeightInputSkip = () => {\n    if (!user) return;\n    \n    // Get the last logged weight\n    const weightLogs = logs.filter(log => log.weight !== null).sort((a, b) => \n      new Date(b.date).getTime() - new Date(a.date).getTime()\n    );\n    const lastLoggedWeight = weightLogs.length > 0 ? weightLogs[0].weight! : user.weight;\n    \n    console.log('⏭️ Weight input skipped, using last logged weight:', lastLoggedWeight);\n\n    // Add weight log entry for today's date using last logged weight\n    const today = new Date().toISOString().split('T')[0];\n    const weightLogEntry: DailyLog = {\n      date: today,\n      deficit: null,\n      weight: lastLoggedWeight\n    };\n    \n    // Add to logs if it doesn't already exist for today\n    const existingLogIndex = logs.findIndex(log => log.date === today);\n    if (existingLogIndex >= 0) {\n      // Update existing log with weight\n      const updatedLogs = [...logs];\n      updatedLogs[existingLogIndex] = {\n        ...updatedLogs[existingLogIndex],\n        weight: lastLoggedWeight\n      };\n      setLogs(updatedLogs);\n    } else {\n      // Add new weight log entry\n      setLogs(prev => [...prev, weightLogEntry]);\n    }\n    \n    const currentDeficit = calculateCurrentDeficit(logs);\n\n    // Calculate which rewards were earned during this iteration\n    const totalDeficitNeeded = calculateTotalDeficitNeeded(user.targetLoss);\n    const earnedRewards: string[] = [];\n    \n    // Get current rewards from localStorage\n    const currentRewards = JSON.parse(localStorage.getItem('butterloss_rewards') || '[]');\n    const defaultRewards = [\n      'Buy a new outfit',\n      'Go for a spa day', \n      'Take a weekend trip',\n      'Buy something expensive'\n    ];\n    const rewards = currentRewards.length > 0 ? currentRewards : defaultRewards;\n\n    // Check which milestones were achieved based on current deficit\n    const sliceSize = totalDeficitNeeded / 4;\n    for (let i = 0; i < 4; i++) {\n      const sliceEnd = (i + 1) * sliceSize;\n      if (currentDeficit >= sliceEnd) {\n        earnedRewards.push(rewards[i] || defaultRewards[i]);\n      }\n    }\n\n    // Don't add to iterations yet - only when user starts new iteration\n    setShowWeightInput(false);\n    setGoalCompletedHandled(true);\n    // Don't automatically start new iteration - let user decide when to start\n  };\n\n  const handleNewIteration = (currentWeight: number, targetWeight: number) => {\n    if (!user) return;\n\n    // Calculate new target loss\n    const newTargetLoss = currentWeight - targetWeight;\n\n    // Update user with new weights and target loss\n    const updatedUser = {\n      ...user,\n      weight: currentWeight,\n      targetWeight: targetWeight,\n      targetLoss: newTargetLoss\n    };\n    setUserSafely(updatedUser);\n\n    // Add weight log entry for today's date\n    const today = new Date().toISOString().split('T')[0];\n    const weightLogEntry: DailyLog = {\n      date: today,\n      deficit: null,\n      weight: currentWeight\n    };\n\n    // Reset all tracking data and add initial weight log\n    setLogs([weightLogEntry]);\n    setCurrentIterationStartDate(new Date().toISOString().split('T')[0]);\n    setGoalCompletedHandled(false);\n    \n    // Clear localStorage for current iteration\n    localStorage.removeItem('butterloss_logs');\n    localStorage.removeItem('butterloss_rewards');\n    for (let i = 0; i < 4; i++) {\n      localStorage.removeItem(`milestone_${i}_achieved`);\n    }\n\n    setShowIterationSetup(false);\n  };\n\n  const handleViewIterationDetails = (iterationId: string) => {\n    const iteration = iterations.find(iter => iter.summary.id === iterationId);\n    if (iteration) {\n      setSelectedIteration(iteration);\n    }\n  };\n\n  const getCurrentWeight = (): number => {\n    const weightLogs = logs.filter(log => log.weight !== null).sort((a, b) => \n      new Date(b.date).getTime() - new Date(a.date).getTime()\n    );\n    return weightLogs.length > 0 ? weightLogs[0].weight! : user!.weight;\n  };\n\n  const resetData = () => {\n    if (window.confirm('Are you sure you want to reset all your data? This cannot be undone.')) {\n      localStorage.removeItem('butterloss_user');\n      localStorage.removeItem('butterloss_logs');\n      localStorage.removeItem('butterloss_rewards');\n      localStorage.removeItem('butterloss_iterations');\n      localStorage.removeItem('butterloss_iteration_start_date');\n      for (let i = 0; i < 4; i++) {\n        localStorage.removeItem(`milestone_${i}_achieved`);\n      }\n      setUserSafely(null);\n      setLogs([]);\n      setIterations([]);\n      setCurrentIterationStartDate('');\n      setCurrentView('setup');\n    }\n  };\n\n  const resetIteration = () => {\n    if (window.confirm('Are you sure you want to reset the current iteration? This will remove all calorie deficit entries and weight log entries from the current iteration. This cannot be undone.')) {\n      // Clear all logs for current iteration\n      setLogs([]);\n      // Reset iteration start date to today\n      const today = new Date().toISOString().split('T')[0];\n      setCurrentIterationStartDate(today);\n      // Reset goal completion flag\n      setGoalCompletedHandled(false);\n      // Clear localStorage for current iteration\n      localStorage.removeItem('butterloss_logs');\n      localStorage.removeItem('butterloss_rewards');\n      for (let i = 0; i < 4; i++) {\n        localStorage.removeItem(`milestone_${i}_achieved`);\n      }\n      console.log('🔄 Current iteration reset successfully');\n    }\n  };\n\n  const clearCacheAndRestart = () => {\n    if (window.confirm('This will clear all localStorage and restart the app. Continue?')) {\n      localStorage.clear();\n      window.location.reload();\n    }\n  };\n\n  if (!user) {\n    console.log('No user found, showing UserSetup');\n    return <UserSetup onComplete={handleUserSetup} />;\n  }\n\n  console.log('User exists, showing dashboard. User:', user, 'Logs:', logs.length);\n\n  // Get current weight from the most recent weight entry, or use initial weight\n  const weightLogs = logs.filter(log => log.weight !== null).sort((a, b) => \n    new Date(b.date).getTime() - new Date(a.date).getTime()\n  );\n  const currentWeight = weightLogs.length > 0 ? weightLogs[0].weight! : user.weight;\n\n  const totalDeficitNeeded = calculateTotalDeficitNeeded(user.targetLoss);\n  const currentDeficit = calculateCurrentDeficit(logs);\n  const remainingDeficit = calculateRemainingDeficit(totalDeficitNeeded, currentDeficit);\n  const butterPacks = calculateButterPacks(logs);\n  const gheePacks = calculateGheePacks(logs);\n  const currentStreak = calculateCurrentStreak(logs);\n\n  const weightLossData: WeightLossData = {\n    user,\n    logs,\n    totalDeficitNeeded,\n    currentDeficit,\n    remainingDeficit,\n    butterPacks,\n    gheePacks,\n    currentStreak\n  };\n\n  return (\n    <div className=\"app\">\n      <header className=\"app-header\">\n        <h1>🧈 ButterLoss</h1>\n        <nav className=\"nav-tabs\">\n          <button \n            className={`nav-tab ${currentView === 'dashboard' ? 'active' : ''}`}\n            onClick={() => setCurrentView('dashboard')}\n          >\n            📊 Dashboard\n          </button>\n          <button \n            className={`nav-tab ${currentView === 'calendar' ? 'active' : ''}`}\n            onClick={() => setCurrentView('calendar')}\n          >\n            📅 Calendar\n          </button>\n          <button \n            className={`nav-tab ${currentView === 'butter' ? 'active' : ''}`}\n            onClick={() => setCurrentView('butter')}\n          >\n            🧈 Butter Collection\n          </button>\n          <button \n            className={`nav-tab ${currentView === 'weight' ? 'active' : ''}`}\n            onClick={() => setCurrentView('weight')}\n          >\n            ⚖️ Weight Loss\n          </button>\n          <button \n            className={`nav-tab ${currentView === 'rewards' ? 'active' : ''}`}\n            onClick={() => setCurrentView('rewards')}\n          >\n            🏆 Rewards\n          </button>\n        </nav>\n        <button className=\"reset-btn\" onClick={resetData}>\n          🔄 Reset\n        </button>\n        <button className=\"clear-cache-btn\" onClick={clearCacheAndRestart}>\n          🧹 Clear Cache & Restart\n        </button>\n      </header>\n\n      <main className=\"app-main\">\n        <div className=\"user-info\">\n          <h2>Welcome back, {user.name}! 👋</h2>\n          <p>Current Weight: {currentWeight} kg | Target: {user.targetWeight} kg</p>\n        </div>\n\n        {currentView === 'dashboard' && (\n          <div className=\"dashboard\">\n            <DailyLogForm onLogSubmit={handleLogSubmit} currentWeight={currentWeight} />\n            <DeficitProgress data={weightLossData} />\n            <EstimatedCompletion data={weightLossData} onUpdateDailyGoal={handleUpdateDailyGoal} />\n            <TipsForSuccess />\n            <IterationHistory \n              iterations={iterations} \n              onViewDetails={handleViewIterationDetails} \n            />\n            <div className=\"dashboard-actions\">\n              {currentDeficit >= totalDeficitNeeded && (\n                <button onClick={handleStartNewIteration} className=\"complete-iteration-btn\">\n                  🔁 Start New Iteration\n                </button>\n              )}\n              <button onClick={resetIteration} className=\"reset-iteration-btn\">\n                🔄 Reset Iteration\n              </button>\n            </div>\n          </div>\n        )}\n\n        {currentView === 'calendar' && (\n          <div className=\"calendar-view\">\n            <Calendar logs={logs} onLogSubmit={handleLogSubmit} currentWeight={currentWeight} />\n          </div>\n        )}\n\n        {currentView === 'butter' && (\n          <div className=\"butter-view\">\n            <ButterCollection data={weightLossData} />\n          </div>\n        )}\n\n        {currentView === 'weight' && (\n          <div className=\"weight-view\">\n            <WeightLoss logs={logs} targetWeight={user.targetWeight} onLogSubmit={handleLogSubmit} currentWeight={currentWeight} />\n          </div>\n        )}\n\n        {currentView === 'rewards' && (\n          <div className=\"rewards-view\">\n            <Rewards data={weightLossData} onUpdateRewards={handleUpdateRewards} />\n          </div>\n        )}\n      </main>\n\n      {showIterationSetup && (\n        <IterationSetup\n          onComplete={handleNewIteration}\n          onCancel={() => setShowIterationSetup(false)}\n        />\n      )}\n\n      {selectedIteration && (\n        <IterationDetails\n          iteration={selectedIteration}\n          onClose={() => setSelectedIteration(null)}\n        />\n      )}\n\n      {showWeightInput && (\n        <WeightInputModal\n          startingWeight={user!.weight}\n          lastLoggedWeight={getCurrentWeight()}\n          onComplete={handleWeightInputComplete}\n          onSkip={handleWeightInputSkip}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}